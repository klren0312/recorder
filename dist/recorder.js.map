{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/./src/recorder.ts"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Recorder","options","isplaying","lBuffer","rBuffer","tempPCM","inputSampleBits","playStamp","playTime","totalPlayTime","offset","fileSize","buffer","context","window","AudioContext","webkitAudioContext","inputSampleRate","sampleRate","config","sampleBits","indexOf","numChannels","compiling","outputSampleRate","oututSampleBits","littleEdian","ArrayBuffer","DataView","setInt16","Int16Array","initUserMedia","initRecorder","_this","destroy","analyser","createAnalyser","fftSize","createScript","createScriptProcessor","recorder","apply","onaudioprocess","e","isrecording","ispause","vol","lData","inputBuffer","getChannelData","rData","push","Float32Array","size","length","pcm","transformIntoPCM","byteLength","Math","floor","max","duration","onprocess","onprogress","data","start","constraints","clear","audio","navigator","mediaDevices","getUserMedia","then","stream","audioInput","createMediaStreamSource","connect","destination","pause","resume","stop","disconnect","play","source","playAudioData","getPlayTime","_now","currentTime","pausePlay","resumePlay","stopPlay","getWholeData","getNextData","slice","decodeAudioData","getWAV","createBufferSource","throwError","message","getRecordAnalyseData","prevDomainData","dataArray","Uint8Array","frequencyBinCount","getByteTimeDomainData","getPlayAnalyseData","getPCM","pcm_1","offset_1","forEach","block","len","setInt8","getInt8","PCM","flat","compress","encodePCM","getPCMBlob","Blob","downloadPCM","pcmBlob","download","pcmTemp","encodeWAV","getWAVBlob","type","downloadWAV","wavBlob","left","right","stopStream","closeAudioContext","getTracks","track","close","state","Promise","resolve","blob","oA","document","createElement","href","URL","createObjectURL","click","clearCache","set","playAudio","oAudio","src","rate","round","compression","result","index","j","temp","bytes","dataLength","val","min","channelCount","writeString","setUint32","setUint16","setUint8","getUint8","Error","undefined","webkitGetUserMedia","mozGetUserMedia","reject","getPermission","str","charCodeAt","default"],"mappings":"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","file":"recorder.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Recorder\"] = factory();\n\telse\n\t\troot[\"Recorder\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","declare let window: any;\r\ndeclare let Math: Math;\r\ndeclare let document: Document;\r\ndeclare let navigator: NavigatorNew;\r\ndeclare let Promise: PromiseConstructor;\r\n\r\ninterface NavigatorNew extends Navigator {\r\n    getUserMedia: any,\r\n    webkitGetUserMedia: any,\r\n    mozGetUserMedia: any,\r\n}\r\n\r\n// 构造函数参数格式\r\ninterface recorderConfig {\r\n    sampleBits?: number,        // 采样位数\r\n    sampleRate?: number,        // 采样率\r\n    numChannels?: number,       // 声道数\r\n    compiling?: boolean,        // 是否边录边播\r\n}\r\n\r\ninterface dataview {\r\n    byteLength: number,\r\n    buffer: {\r\n        byteLength: number,\r\n    },\r\n    getUint8: any,\r\n}\r\n\r\nclass Recorder {\r\n    private isrecording: boolean;               // 是否正在录音\r\n    private isplaying: boolean = false;         // 是否正在播放\r\n    private ispause: boolean;                   // 是否是暂停\r\n    private context: AudioContext;\r\n    private config: recorderConfig;             // 配置\r\n    private size: number;                       // 录音文件总长度\r\n    private lBuffer: Array<Float32Array> = [];  // pcm音频数据搜集器(左声道)\r\n    private rBuffer: Array<Float32Array> = [];  // pcm音频数据搜集器(右声道)\r\n    private PCM: any;                           // 最终的PCM数据缓存，避免多次encode\r\n    private tempPCM: Array<DataView> = [];      // 边录边转时临时存放pcm的\r\n    private audioInput: any;\r\n    private inputSampleRate: number;            // 输入采样率\r\n    private source: any;                        // 音频输入\r\n    private recorder: any;\r\n    private inputSampleBits: number = 16;       // 输入采样位数\r\n    private outputSampleRate: number;           // 输出采样率\r\n    private oututSampleBits: number;            // 输出采样位数\r\n    private analyser: any;\r\n    private littleEdian: boolean;               // 是否是小端字节序\r\n    private prevDomainData: any;                // 存放前一次图形化的数据\r\n    private playStamp: number = 0;              // 播放录音时 AudioContext 记录的时间戳\r\n    private playTime: number = 0;               // 记录录音播放时长\r\n    private totalPlayTime: number = 0;          // 音频播放总长度\r\n    private offset: number = 0;                 // 边录边转，记录外部的获取偏移位置\r\n    private stream: MediaStream;                        // 流\r\n\r\n    public fileSize: number = 0;                // 录音大小，byte为单位\r\n    public duration: number;                    // 录音时长\r\n    // 正在录音时间，参数是已经录了多少时间了\r\n    public onprocess: (duration: number) => void;\r\n    // onprocess 替代函数，保持原来的 onprocess 向下兼容\r\n    public onprogress: (payload: {\r\n        duration: number,\r\n        fileSize: number,\r\n        vol: number,\r\n        data: Array<DataView>,      // 当前存储的所有录音数据\r\n    }) => void;\r\n    /**\r\n     * @param {Object} options 包含以下三个参数：\r\n     * sampleBits，采样位数，一般8,16，默认16\r\n     * sampleRate，采样率，一般 11025、16000、22050、24000、44100、48000，默认为浏览器自带的采样率\r\n     * numChannels，声道，1或2\r\n     */\r\n    constructor(options: recorderConfig = {}) {\r\n        // 临时audioContext，为了获取输入采样率的\r\n        let context = new (window.AudioContext || window.webkitAudioContext)();\r\n\r\n        this.inputSampleRate = context.sampleRate;     // 获取当前输入的采样率\r\n        // 配置config，检查值是否有问题\r\n        this.config = {\r\n            // 采样数位 8, 16\r\n            sampleBits: ~[8, 16].indexOf(options.sampleBits) ? options.sampleBits : 16,\r\n            // 采样率\r\n            sampleRate: ~[8000, 11025, 16000, 22050, 24000, 44100, 48000].indexOf(options.sampleRate) ? options.sampleRate : this.inputSampleRate,\r\n            // 声道数，1或2\r\n            numChannels: ~[1, 2].indexOf(options.numChannels) ? options.numChannels : 1,\r\n            // 是否需要边录边转，默认关闭，后期使用web worker\r\n            compiling: !!options.compiling || false,\r\n        };\r\n        // 设置采样的参数\r\n        this.outputSampleRate = this.config.sampleRate;     // 输出采样率\r\n        this.oututSampleBits = this.config.sampleBits;      // 输出采样数位 8, 16\r\n        // 判断端字节序\r\n        this.littleEdian = (function() {\r\n            let buffer = new ArrayBuffer(2);\r\n            new DataView(buffer).setInt16(0, 256, true);\r\n            return new Int16Array(buffer)[0] === 256;\r\n        })();\r\n        // 兼容 getUserMedia\r\n        Recorder.initUserMedia();\r\n    }\r\n\r\n    /** \r\n     * 初始化录音实例\r\n     */\r\n    initRecorder(): void {\r\n        if (this.context) {\r\n            // 关闭先前的录音实例，因为前次的实例会缓存少量前次的录音数据\r\n            this.destroy();\r\n        }\r\n        this.context = new AudioContext();\r\n        \r\n        this.analyser = this.context.createAnalyser();  // 录音分析节点\r\n        this.analyser.fftSize = 2048;                   // 表示存储频域的大小\r\n\r\n        // 第一个参数表示收集采样的大小，采集完这么多后会触发 onaudioprocess 接口一次，该值一般为1024,2048,4096等，一般就设置为4096\r\n        // 第二，三个参数分别是输入的声道数和输出的声道数，保持一致即可。\r\n        let createScript = this.context.createScriptProcessor;\r\n        this.recorder = createScript.apply(this.context, [4096, this.config.numChannels, this.config.numChannels]);\r\n\r\n        // 音频采集\r\n        this.recorder.onaudioprocess = e => {\r\n            if (!this.isrecording || this.ispause) {\r\n                // 不在录音时不需要处理，FF 在停止录音后，仍会触发 audioprocess 事件\r\n                return;\r\n            }\r\n            // 左声道数据\r\n            // getChannelData返回Float32Array类型的pcm数据\r\n            let lData = e.inputBuffer.getChannelData(0),\r\n                rData = null,\r\n                vol = 0;        // 音量百分比\r\n\r\n            this.lBuffer.push(new Float32Array(lData));\r\n\r\n            this.size += lData.length;\r\n\r\n            // 判断是否有右声道数据\r\n            if (2 === this.config.numChannels) {\r\n                rData = e.inputBuffer.getChannelData(1);\r\n                this.rBuffer.push(new Float32Array(rData));\r\n\r\n                this.size += rData.length;\r\n            }\r\n\r\n            // 边录边转处理\r\n            if (this.config.compiling) {\r\n                let pcm = this.transformIntoPCM(lData, rData);\r\n\r\n                this.tempPCM.push(pcm);\r\n                // 计算录音大小\r\n                this.fileSize = pcm.byteLength * this.tempPCM.length;\r\n            } else {\r\n                // 计算录音大小\r\n                this.fileSize = Math.floor(this.size / Math.max( this.inputSampleRate / this.outputSampleRate, 1))\r\n                    * (this.oututSampleBits / 8)\r\n            }\r\n            // 为何此处计算大小需要分开计算。原因是先录后转时，是将所有数据一起处理，边录边转是单个 4096 处理，\r\n            // 有小数位的偏差。\r\n\r\n            // 计算音量百分比\r\n            vol = Math.max.apply(Math, lData) * 100;\r\n            // 统计录音时长\r\n            this.duration += 4096 / this.inputSampleRate;\r\n            // 录音时长回调\r\n            this.onprocess && this.onprocess(this.duration);\r\n            // 录音时长及响度回调\r\n            this.onprogress && this.onprogress({\r\n                duration: this.duration,\r\n                fileSize: this.fileSize,\r\n                vol,\r\n                data: this.tempPCM,     // 当前所有的pcm数据，调用者控制增量\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 开始录音\r\n     *\r\n     * @returns {Promise<{}>}\r\n     * @memberof Recorder\r\n     */\r\n    start(constraints?: MediaStreamConstraints): Promise<void | MediaStream> {\r\n        if (this.isrecording) {\r\n            // 正在录音，则不允许\r\n            return;\r\n        }\r\n        // 清空数据\r\n        this.clear();\r\n        this.initRecorder();\r\n        this.isrecording = true;\r\n        if (!constraints) {\r\n            constraints = {\r\n                audio: true\r\n            }\r\n        }\r\n        return navigator.mediaDevices.getUserMedia(constraints).then(stream => {\r\n            // audioInput表示音频源节点\r\n            // stream是通过navigator.getUserMedia获取的外部（如麦克风）stream音频输出，对于这就是输入\r\n            this.audioInput = this.context.createMediaStreamSource(stream);\r\n            this.stream = stream;\r\n        }/* 报错丢给外部使用者catch，后期可在此处增加建议性提示\r\n            , error => {\r\n            // 抛出异常\r\n            Recorder.throwError(error.name + \" : \" + error.message);\r\n        } */).then(() => {\r\n            // audioInput 为声音源，连接到处理节点 recorder\r\n            this.audioInput.connect(this.analyser);\r\n            this.analyser.connect(this.recorder);\r\n            // 处理节点 recorder 连接到扬声器\r\n            this.recorder.connect(this.context.destination);\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * 暂停录音\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    pause(): void {\r\n        if (this.isrecording && !this.ispause) {\r\n            this.ispause = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 继续录音\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    resume(): void {\r\n        if (this.isrecording && this.ispause) {\r\n            this.ispause = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 停止录音\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    stop(): void {\r\n        this.isrecording = false;\r\n        this.audioInput && this.audioInput.disconnect();\r\n        this.recorder.disconnect();\r\n    }\r\n\r\n    /**\r\n     * 播放录音\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    play(): void {\r\n        this.stop();\r\n        // 关闭前一次音频播放\r\n        this.source && this.source.stop();\r\n\r\n        this.isplaying = true;\r\n        this.playTime = 0;\r\n\r\n        // 记录开始播放的时间\r\n        this.playAudioData();\r\n    }\r\n\r\n    /**\r\n     * 获取音频文件已经播放了的时间\r\n     *\r\n     * @returns {number}\r\n     * @memberof Recorder\r\n     */\r\n    public getPlayTime(): number {\r\n        let _now = 0;\r\n\r\n        if (this.isplaying) {\r\n            // 播放中，使用预留时间 + 偏差时间\r\n            _now = this.context.currentTime - this.playStamp + this.playTime;\r\n        } else {\r\n            _now = this.playTime;\r\n        }\r\n\r\n        if (_now >= this.totalPlayTime) {\r\n            _now = this.totalPlayTime;\r\n        }\r\n\r\n        return _now;\r\n    }\r\n\r\n    /**\r\n     * 暂停播放录音\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    pausePlay(): void {\r\n        if (this.isrecording || !this.isplaying) {\r\n            // 正在录音或没有播放，暂停无效\r\n            return;\r\n        }\r\n\r\n        this.source && this.source.disconnect();\r\n        // 多次暂停需要累加\r\n        this.playTime += this.context.currentTime - this.playStamp;\r\n        this.isplaying = false;\r\n    }\r\n\r\n    /**\r\n     * 恢复播放录音\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    resumePlay(): void {\r\n        if (this.isrecording || this.isplaying || 0 === this.playTime) {\r\n            // 正在录音或已经播放或没开始播放，恢复无效\r\n            return;\r\n        }\r\n\r\n        this.isplaying = true;\r\n        this.playAudioData();\r\n    }\r\n\r\n    /**\r\n     * 停止播放\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    stopPlay(): void {\r\n        if (this.isrecording) {\r\n            // 正在录音，停止录音播放无效\r\n            return;\r\n        }\r\n\r\n        this.playTime = 0;\r\n        this.isplaying = false;\r\n        this.source && this.source.stop();\r\n    }\r\n\r\n    /**\r\n     * 获取当前已经录音的PCM音频数据\r\n     *\r\n     * @returns[DataView]\r\n     * @memberof Recorder\r\n     */\r\n    getWholeData() {\r\n        return this.tempPCM;\r\n    }\r\n\r\n    /**\r\n     * 获取余下的新数据，不包括 getNextData 前一次获取的数据\r\n     *\r\n     * @returns [DataView]\r\n     * @memberof Recorder\r\n     */\r\n    getNextData() {\r\n        let length = this.tempPCM.length,\r\n            data = this.tempPCM.slice(this.offset);\r\n\r\n        this.offset = length;\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * 利用 decodeAudioData播放录音数据，每次播放都需创建，因为buffersource只能被使用一次\r\n     *\r\n     * @private\r\n     * @memberof Recorder\r\n     */\r\n    private playAudioData(): void {\r\n        this.context.decodeAudioData(this.getWAV().buffer, buffer => {\r\n            this.source = this.context.createBufferSource();\r\n\r\n            // 设置数据\r\n            this.source.buffer = buffer;\r\n            this.totalPlayTime = this.source.buffer.duration;\r\n            // connect到分析器，还是用录音的，因为播放时不能录音的\r\n            this.source.connect(this.analyser);\r\n            this.analyser.connect(this.context.destination);\r\n            this.source.start(0, this.playTime);\r\n\r\n            // 记录当前的时间戳，以备暂停时使用\r\n            this.playStamp = this.context.currentTime;\r\n        }, function(e) {\r\n            Recorder.throwError(e.message);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 获取当前录音的波形数据，\r\n     * 调取频率由外部控制。\r\n     * \r\n     * @memberof Recorder\r\n     */\r\n    getRecordAnalyseData() {\r\n        if (this.ispause) {\r\n            // 暂停时不需要发送录音的数据，处理FF下暂停仍就获取录音数据的问题\r\n            // 为防止暂停后，画面空白，故返回先前的数据\r\n            return this.prevDomainData;\r\n        }\r\n        let dataArray = new Uint8Array(this.analyser.frequencyBinCount);\r\n        // 将数据拷贝到dataArray中。\r\n        this.analyser.getByteTimeDomainData(dataArray);\r\n\r\n        return ( this.prevDomainData = dataArray);\r\n    }\r\n\r\n    /**\r\n     * 获取录音播放时的波形数据，\r\n     * \r\n     * @memberof Recorder\r\n     */\r\n    getPlayAnalyseData() {\r\n        // 现在录音和播放不允许同时进行，所有复用的录音的analyser节点。\r\n        return this.getRecordAnalyseData();\r\n    }\r\n\r\n    /**\r\n     * 获取PCM编码的二进制数据(dataview)\r\n     *\r\n     * @returns {dataview}  PCM二进制数据\r\n     * @memberof Recorder\r\n     */\r\n    private getPCM() {\r\n        if (this.tempPCM.length) {\r\n            // 优先使用边录边存下的\r\n            // 将存下的 DataView 数据合并了\r\n            let buffer = new ArrayBuffer( this.tempPCM.length * this.tempPCM[0].byteLength ),\r\n                pcm = new DataView(buffer),\r\n                offset = 0;\r\n\r\n            // 遍历存储数据\r\n            this.tempPCM.forEach((block) => {\r\n                for (let i = 0, len = block.byteLength; i < len; ++i) {\r\n                    pcm.setInt8(offset, block.getInt8(i));\r\n\r\n                    offset++;\r\n                }\r\n            });\r\n            // 最终的PCM数据已经有了，temp不需要了\r\n            this.PCM = pcm;\r\n            this.tempPCM = [];\r\n        }\r\n        if (this.PCM) {\r\n            // 给缓存\r\n            return this.PCM;\r\n        }\r\n        // 二维转一维\r\n        let data: any = this.flat();\r\n        // 压缩或扩展\r\n        data = Recorder.compress(data, this.inputSampleRate, this.outputSampleRate);\r\n        // 按采样位数重新编码\r\n        return this.PCM = Recorder.encodePCM(data, this.oututSampleBits, this.littleEdian);\r\n    }\r\n\r\n    /**\r\n     * 获取PCM格式的blob数据\r\n     *\r\n     * @returns { blob }  PCM格式的blob数据\r\n     * @memberof Recorder\r\n     */\r\n    getPCMBlob() {\r\n        // 先停止\r\n        this.stop();\r\n        return new Blob([ this.getPCM() ]);\r\n    }\r\n\r\n    /**\r\n     * 下载录音pcm数据\r\n     *\r\n     * @param {string} [name='recorder']    重命名的名字\r\n     * @memberof Recorder\r\n     */\r\n    downloadPCM(name: string = 'recorder'): void {\r\n        let pcmBlob = this.getPCMBlob();\r\n        \r\n        this.download(pcmBlob, name, 'pcm');\r\n    }\r\n\r\n    /**\r\n     * 获取WAV编码的二进制数据(dataview)\r\n     *\r\n     * @returns {dataview}  WAV编码的二进制数据\r\n     * @memberof Recorder\r\n     */\r\n    private getWAV() {\r\n        let pcmTemp = this.getPCM(),\r\n            wavTemp = Recorder.encodeWAV(pcmTemp, this.inputSampleRate, \r\n                this.outputSampleRate, this.config.numChannels, this.oututSampleBits, this.littleEdian);\r\n\r\n        return wavTemp;\r\n    }\r\n\r\n    /**\r\n     * 获取WAV音频的blob数据\r\n     *\r\n     * @returns { blob }    wav格式blob数据\r\n     * @memberof Recorder\r\n     */\r\n    getWAVBlob() {\r\n        // 先停止\r\n        this.stop();\r\n        return new Blob([ this.getWAV() ], { type: 'audio/wav' });\r\n    }\r\n\r\n    /**\r\n     * 下载录音的wav数据\r\n     *\r\n     * @param {string} [name='recorder']    重命名的名字\r\n     * @memberof Recorder\r\n     */\r\n    downloadWAV(name: string = 'recorder'): void {\r\n        let wavBlob = this.getWAVBlob();\r\n        \r\n        this.download(wavBlob, name, 'wav');\r\n    }\r\n\r\n    /**\r\n     * 将获取到到左右声道的Float32Array数据编码转化\r\n     *\r\n     * @param {Float32Array} lData  左声道数据\r\n     * @param {Float32Array} rData  有声道数据\r\n     * @returns DataView\r\n     */\r\n    private transformIntoPCM(lData, rData) {\r\n        let lBuffer = new Float32Array(lData),\r\n            rBuffer = new Float32Array(rData);\r\n\r\n        let data = Recorder.compress({\r\n            left: lBuffer,\r\n            right: rBuffer,\r\n        }, this.inputSampleRate, this.outputSampleRate);\r\n\r\n        return Recorder.encodePCM(data, this.oututSampleBits, this.littleEdian);\r\n    }\r\n\r\n    /**\r\n     * 销毁录音对象\r\n     * @memberof Recorder\r\n     */\r\n    destroy(): Promise<any> {\r\n        // 结束流\r\n        this.stopStream();\r\n\r\n        return this.closeAudioContext();\r\n    }\r\n\r\n    /**\r\n     * 终止流（这可以让浏览器上正在录音的标志消失掉）\r\n     * @private\r\n     * @memberof Recorder\r\n     */\r\n    private stopStream() {\r\n        if (this.stream && this.stream.getTracks) {\r\n            this.stream.getTracks().forEach(track => track.stop());\r\n            this.stream = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * close兼容方案\r\n     * 如firefox 30 等低版本浏览器没有 close方法\r\n     */\r\n    private closeAudioContext() {\r\n        if (this.context && this.context.close && this.context.state !== 'closed') {\r\n            return this.context.close();\r\n        } else {\r\n            return new Promise((resolve) => {\r\n                resolve(0);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 下载录音文件\r\n     * @private\r\n     * @param {*} blob      blob数据\r\n     * @param {string} name 下载的文件名\r\n     * @param {string} type 下载的文件后缀\r\n     * @memberof Recorder\r\n     */\r\n    private download(blob, name: string, type: string): void {\r\n        try {\r\n            let oA = document.createElement('a');\r\n            \r\n            oA.href = window.URL.createObjectURL(blob);\r\n            oA.download = name + '.' + type;\r\n            oA.click();\r\n        } catch(e) {\r\n            Recorder.throwError(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 外部方法清除缓存 用于实时录音获取时内存不爆\r\n     */\r\n    clearCache(): void {\r\n        this.lBuffer.length = 0;\r\n        this.rBuffer.length = 0;\r\n        this.size = 0;\r\n        this.fileSize = 0;\r\n        this.PCM = null;\r\n        this.tempPCM = []\r\n        this.duration = 0;\r\n    }\r\n\r\n    /**\r\n     * 清空状态，重新开始录音（变量初始化）\r\n     *\r\n     * @private\r\n     * @memberof Recorder\r\n     */\r\n    private clear(): void {\r\n        this.lBuffer.length = 0;\r\n        this.rBuffer.length = 0;\r\n        this.size = 0;\r\n        this.fileSize = 0;\r\n        this.PCM = null;\r\n        this.audioInput = null;\r\n        this.duration = 0;\r\n        this.ispause = false;\r\n        this.isplaying = false;\r\n        this.playTime = 0;\r\n        this.totalPlayTime = 0;\r\n\r\n        // 录音前，关闭录音播放\r\n        if (this.source) {\r\n            this.source.stop();\r\n            // 重新开启录制，由于新建了 AudioContext ，source需要清空，\r\n            // 处理iphone 上 safari 浏览器 第二次播放报错的问题。\r\n            this.source = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 将二维数组转一维\r\n     * \r\n     * @private\r\n     * @returns  {float32array}     音频pcm二进制数据\r\n     * @memberof Recorder\r\n     */\r\n    private flat() {\r\n        let lData = null,\r\n            rData = new Float32Array(0);    // 右声道默认为0\r\n\r\n        // 创建存放数据的容器\r\n        if (1 === this.config.numChannels) {\r\n            lData = new Float32Array(this.size);\r\n        } else {\r\n            lData = new Float32Array(this.size / 2);\r\n            rData = new Float32Array(this.size / 2);\r\n        }\r\n        // 合并\r\n        let offset = 0; // 偏移量计算\r\n\r\n        // 将二维数据，转成一维数据\r\n        // 左声道\r\n        for (let i = 0; i < this.lBuffer.length; i++) {\r\n            lData.set(this.lBuffer[i], offset);\r\n            offset += this.lBuffer[i].length;\r\n        }\r\n\r\n        offset = 0;\r\n        // 右声道\r\n        for (let i = 0; i < this.rBuffer.length; i++) {\r\n            rData.set(this.rBuffer[i], offset);\r\n            offset += this.rBuffer[i].length;\r\n        }\r\n\r\n        return {\r\n            left: lData,\r\n            right: rData\r\n        };\r\n    }\r\n\r\n    /** \r\n     * 播放外部音乐文件\r\n     * \r\n     * @param {float32array} blob    blob音频数据\r\n     * @memberof Recorder\r\n     */\r\n    static playAudio(blob): void {\r\n        let oAudio = document.createElement('audio');\r\n\r\n        oAudio.src = window.URL.createObjectURL(blob);\r\n        // 播放音乐\r\n        oAudio.play();\r\n    }\r\n\r\n    /**\r\n     * 数据合并压缩\r\n     * 根据输入和输出的采样率压缩数据，\r\n     * 比如输入的采样率是48k的，我们需要的是（输出）的是16k的，由于48k与16k是3倍关系，\r\n     * 所以输入数据中每隔3取1位\r\n     * \r\n     * @static\r\n     * @param {float32array} data       [-1, 1]的pcm数据\r\n     * @param {number} inputSampleRate  输入采样率\r\n     * @param {number} outputSampleRate 输出采样率\r\n     * @returns  {float32array}         压缩处理后的二进制数据\r\n     * @memberof Recorder\r\n     */\r\n    static compress(data, inputSampleRate: number, outputSampleRate: number) {\r\n        // 压缩，根据采样率进行压缩\r\n        let rate =  Math.round(inputSampleRate / outputSampleRate),\r\n            compression = Math.max(rate, 1),\r\n            lData = data.left,\r\n            rData = data.right,\r\n            length = Math.floor(( lData.length + rData.length ) / rate),\r\n            result = new Float32Array(length),\r\n            index = 0,\r\n            j = 0;\r\n\r\n        // 循环间隔 compression 位取一位数据\r\n        while (index < length) {\r\n            let temp = Math.floor(j)\r\n            \r\n            result[index] = lData[temp];\r\n            index++;\r\n\r\n            if (rData.length) {\r\n                /*\r\n                 * 双声道处理\r\n                 * e.inputBuffer.getChannelData(0)得到了左声道4096个样本数据，1是右声道的数据，\r\n                 * 此处需要组和成LRLRLR这种格式，才能正常播放，所以要处理下\r\n                 */\r\n                result[index] = rData[temp];\r\n                index++;\r\n            }\r\n            \r\n            j += compression;\r\n        }\r\n        // 返回压缩后的一维数据\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 转换到我们需要的对应格式的编码\r\n     * \r\n     * @static\r\n     * @param {float32array} bytes      pcm二进制数据\r\n     * @param {number}  sampleBits      采样位数\r\n     * @param {boolean} littleEdian     是否是小端字节序\r\n     * @returns {dataview}              pcm二进制数据\r\n     * @memberof Recorder\r\n     */\r\n    static encodePCM(bytes, sampleBits: number, littleEdian: boolean = true) {\r\n        let offset = 0,\r\n            dataLength = bytes.length * (sampleBits / 8),\r\n            buffer = new ArrayBuffer(dataLength),\r\n            data = new DataView(buffer);\r\n    \r\n        // 写入采样数据\r\n        if (sampleBits === 8) {\r\n            for (let i = 0; i < bytes.length; i++, offset++) {\r\n                // 范围[-1, 1]\r\n                let s = Math.max(-1, Math.min(1, bytes[i]));\r\n                // 8位采样位划分成2^8=256份，它的范围是0-255; \r\n                // 对于8位的话，负数*128，正数*127，然后整体向上平移128(+128)，即可得到[0,255]范围的数据。\r\n                let val = s < 0 ? s * 128 : s * 127;\r\n                val = +val + 128;\r\n                data.setInt8(offset, val);\r\n            }\r\n        } else {\r\n            for (let i = 0; i < bytes.length; i++, offset += 2) {\r\n                let s = Math.max(-1, Math.min(1, bytes[i]));\r\n                // 16位的划分的是2^16=65536份，范围是-32768到32767\r\n                // 因为我们收集的数据范围在[-1,1]，那么你想转换成16位的话，只需要对负数*32768,对正数*32767,即可得到范围在[-32768,32767]的数据。\r\n                data.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, littleEdian);\r\n            }\r\n        }\r\n    \r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * 编码wav，一般wav格式是在pcm文件前增加44个字节的文件头，\r\n     * 所以，此处只需要在pcm数据前增加下就行了。\r\n     * \r\n     * @static\r\n     * @param {DataView} bytes           pcm二进制数据\r\n     * @param {number}  inputSampleRate  输入采样率\r\n     * @param {number}  outputSampleRate 输出采样率\r\n     * @param {number}  numChannels      声道数\r\n     * @param {number}  oututSampleBits  输出采样位数\r\n     * @param {boolean} littleEdian      是否是小端字节序\r\n     * @returns {DataView}               wav二进制数据\r\n     * @memberof Recorder\r\n     */\r\n    static encodeWAV(bytes: dataview, inputSampleRate: number, outputSampleRate: number, numChannels: number, oututSampleBits: number, littleEdian: boolean = true) {\r\n        let sampleRate = outputSampleRate > inputSampleRate ? inputSampleRate : outputSampleRate,   // 输出采样率较大时，仍使用输入的值，\r\n            sampleBits = oututSampleBits,\r\n            buffer = new ArrayBuffer(44 + bytes.byteLength),\r\n            data = new DataView(buffer),\r\n            channelCount = numChannels, // 声道\r\n            offset = 0;\r\n    \r\n        // 资源交换文件标识符\r\n        writeString(data, offset, 'RIFF'); offset += 4;\r\n        // 下个地址开始到文件尾总字节数,即文件大小-8\r\n        data.setUint32(offset, 36 + bytes.byteLength, littleEdian); offset += 4;\r\n        // WAV文件标志\r\n        writeString(data, offset, 'WAVE'); offset += 4;\r\n        // 波形格式标志\r\n        writeString(data, offset, 'fmt '); offset += 4;\r\n        // 过滤字节,一般为 0x10 = 16\r\n        data.setUint32(offset, 16, littleEdian); offset += 4;\r\n        // 格式类别 (PCM形式采样数据)\r\n        data.setUint16(offset, 1, littleEdian); offset += 2;\r\n        // 声道数\r\n        data.setUint16(offset, channelCount, littleEdian); offset += 2;\r\n        // 采样率,每秒样本数,表示每个通道的播放速度\r\n        data.setUint32(offset, sampleRate, littleEdian); offset += 4;\r\n        // 波形数据传输率 (每秒平均字节数) 声道数 × 采样频率 × 采样位数 / 8\r\n        data.setUint32(offset, channelCount * sampleRate * (sampleBits / 8), littleEdian); offset += 4;\r\n        // 快数据调整数 采样一次占用字节数 声道数 × 采样位数 / 8\r\n        data.setUint16(offset, channelCount * (sampleBits / 8), littleEdian); offset += 2;\r\n        // 采样位数\r\n        data.setUint16(offset, sampleBits, littleEdian); offset += 2;\r\n        // 数据标识符\r\n        writeString(data, offset, 'data'); offset += 4;\r\n        // 采样数据总数,即数据总大小-44\r\n        data.setUint32(offset, bytes.byteLength, littleEdian); offset += 4;\r\n        \r\n        // 给wav头增加pcm体\r\n        for (let i = 0; i < bytes.byteLength;) {\r\n            data.setUint8(offset, bytes.getUint8(i));\r\n            offset++;\r\n            i++;\r\n        }\r\n    \r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * 异常处理\r\n     * @static\r\n     * @param {*} message   错误消息\r\n     * @memberof Recorder\r\n     */\r\n    static throwError(message: string) {\r\n        throw new Error (message);\r\n    }\r\n\r\n    // getUserMedia 版本兼容\r\n    static initUserMedia() {\r\n        if (navigator.mediaDevices.getUserMedia === undefined) {\r\n            navigator.mediaDevices.getUserMedia = function(constraints) {\r\n                let getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\r\n                \r\n                if (!getUserMedia) {\r\n                    return Promise.reject(new Error('浏览器不支持 getUserMedia !'));\r\n                }\r\n                \r\n                return new Promise(function(resolve, reject) {\r\n                    getUserMedia.call(navigator, constraints, resolve, reject);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 在没有权限的时候，让弹出获取麦克风弹窗\r\n     *\r\n     * @static\r\n     * @returns {Promise<void | {}>}\r\n     * @memberof Recorder\r\n     */\r\n    static getPermission(): Promise<void | {}> {\r\n        this.initUserMedia();\r\n\r\n        return navigator.mediaDevices.getUserMedia({audio: true}).then((stream) => {\r\n            stream.getTracks().forEach(track => track.stop());\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * 在data中的offset位置开始写入str字符串\r\n * @param {TypedArrays} data    二进制数据\r\n * @param {Number}      offset  偏移量\r\n * @param {String}      str     字符串\r\n */\r\nfunction writeString(data, offset, str): void {\r\n    for (let i = 0; i < str.length; i++) {\r\n        data.setUint8(offset + i, str.charCodeAt(i));\r\n    }\r\n}\r\n\r\nexport default Recorder;"],"sourceRoot":""}